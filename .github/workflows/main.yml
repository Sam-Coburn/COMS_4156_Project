name: C++ Workflow
run-name: ${{github.actor}} ran workflow
on:
  push:
    branches: [main]

  pull_request:
    branches: [main]

jobs:
   style-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install cpplint format checker
        run: |
          sudo apt install -y python3-pip
          pip3 install cpplint
      - name: cpplint
        run: cpplint --linelength=120 api-endpoints/* authentication/* main/* testing/*
   static-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install flawchecker security checker
        run: pip install flawfinder
      - name: Install cppcheck static analysis checker
        run: sudo apt-get -y install cppcheck
      - name: flawfinder
        run: flawfinder api-endpoints/* authentication/auth-service.h authentication/auth-service.cpp main/* testing/*
      - name: cppcheck
        run: |
          cppcheck --language=c++ api-endpoints/*.cc api-endpoints/*.cpp api-endpoints/*.h
          cppcheck --language=c++ authentication/auth-service.h authentication/auth-service.cpp
          cppcheck --language=c++ main/*.cc main/*.cpp main/*.h
          cppcheck --language=c++ testing/*.cc testing/*.cpp testing/*.h
   build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Bazel
        uses: ngalaiko/bazel-action/1.2.1@master
      - name: Install C++ Connector to MySQL
        run: sudo apt install libmysqlcppconn-dev
      - name: Install Boost for Crow
        run: sudo apt-get install libboost-all-dev
      - name: Install Git
        run: sudo apt-get install git
      - name: Install JSONCPP
        run: sudo apt-get install libjsoncpp-dev
      - name: Install glog
        run: |
          sudo apt-get -y install aptitude
          sudo aptitude -y install libgoogle-glog-dev
      - name: Install Auth Libraries
        run: sudo apt-get install libssl-dev
      - name: Setup MySQL
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: '8.0'
          root-password: 123
      - name: Setup Database
        run: sudo mysql -h 127.0.0.1 -u root --password=123 < "matchmaking_api_db_sql.sql"
      - name: Build Project
        run: bazel build --linkopt="-ljsoncpp" //main:main
      - name: Unit Test - Authentication
        run: | 
          bazel test --linkopt="-ljsoncpp" --test_output=all --test_env=GLOG_minloglevel=1 //testing:test-auth-routes-units
      - name: Unit Test - Get/Post Games
        run: | 
          bazel test --linkopt="-ljsoncpp" --test_output=all --test_env=GLOG_minloglevel=1 //testing:test-get-post-games-routes-units
      - name: Unit Test - Matchmaking
        run: | 
          bazel test --linkopt="-ljsoncpp" --test_output=all --test_env=GLOG_minloglevel=1 //testing:test-matchmaking-route-units 
      - name: Unit Test - Player Endpoints
        run: | 
          bazel test --linkopt="-ljsoncpp" --test_output=all --test_env=GLOG_minloglevel=1 //testing:test-player-endpoints-units
      - name: Integration Test - Authentication
        run: |
          bazel test --linkopt="-ljsoncpp" --test_output=all --test_env=GLOG_minloglevel=1 //testing:test-auth-routes-integration
      - name: Integration Test - Player Endpoints
        run: | 
          bazel test --linkopt="-ljsoncpp" --test_output=all --test_env=GLOG_minloglevel=1 //testing:test-player-endpoints-integration
      - name: Integration Test - Get/Post Games
        run: | 
          bazel test --linkopt="-ljsoncpp" --test_output=all --test_env=GLOG_minloglevel=1 //testing:test-get-post-games-routes-integration
      # - name: Test Project (all the tests at once)
      #   run: bazel test --linkopt="-ljsoncpp" --test_output=all //testing:test
